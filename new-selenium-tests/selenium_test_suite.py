import unittest
import os
import time
import logging
from pyvirtualdisplay import Display
from selenium import webdriver
from tests import empty_test
from tests import login_test
from tests import new_form_from_scratch_test
from tests import add_sample_questions_test
from tests import preview_form_test
from tests import delete_all_forms_test
from tests import import_xls_form_test
from tests import export_form_to_xls_test
from tests import deploy_imported_form_test
from tests import enketo_form_submission_test
from tests import export_data_to_xls_test
from tests import verify_no_forms_test
from tests import delete_form_test
from tests import logout_test

# Inherit some helper functions automatically generated by Selenium IDE.
class Test_Selenium(empty_test.EmptyTest):

    DEFAULT_WAIT_SECONDS= 10
    MAX_SUITE_TIME_MINUTES= 10
    timed_out= False

    # Get settings overrides from the environment.
    KOBOFORM_URL= os.environ.get('KOBOFORM_URL', 'http://172.17.0.1:8000/')
    # KOBOFORM_URL= os.environ.get('KOBOFORM_URL', 'http://kf.kobotoolbox.org/')
    if KOBOFORM_URL[-1] != '/':
        KOBOFORM_URL+= '/'
    KOBOCAT_URL= os.environ.get('KOBOCAT_URL', 'http://172.17.0.1:8000/')
    if KOBOCAT_URL[-1] != '/':
        KOBOCAT_URL+= '/'
    KOBO_USERNAME= os.environ.get('KOBO_USERNAME', 'admin')
    KOBO_PASSWORD= os.environ.get('KOBO_PASSWORD', 'admin')
    KOBO_DISABLE_TIMEOUT= os.environ.get('KOBO_DISABLE_TIMEOUT', False)
    ENKETO_VERSION= os.environ.get('ENKETO_VERSION', 'legacy')
    assert ENKETO_VERSION.lower() in ['legacy', 'express']
    enketo_express= ENKETO_VERSION.lower() == 'express'


    def check_timeout(self, status_message=''):
        if self.KOBO_DISABLE_TIMEOUT:
            return

        minutes_elapsed= (time.time() - self.suite_start_time) / 60
        if minutes_elapsed >= self.MAX_SUITE_TIME_MINUTES:
            self.timed_out= True
            raise Exception('Test suite timed out: ' + status_message)

    # Don't use the inherited, automatically-generated setup and teardown methods.
    def setUp(self):
        self.check_timeout()

    def tearDown(self):
        pass


    @classmethod
    def setUpClass(cls):

        # http://stackoverflow.com/a/15400334/1877326
        # Disable debug logging.
        selenium_logger = logging.getLogger('selenium.webdriver.remote.remote_connection')
        # Only display possible problems
        selenium_logger.setLevel(logging.WARN)

        #Initialize a ghost Browser window
        cls.display = Display(visible=0, size=(1500, 1200))
        cls.display.start()

        #Chrome set up
        chromeOptions = webdriver.ChromeOptions()
        chromeOptions.add_experimental_option("prefs", {"download.default_directory" : "/tmp", "download.prompt_for_download": False})
        cls.driver = webdriver.Chrome(chrome_options=chromeOptions)
        cls.driver.implicitly_wait(0)
        cls.driver.maximize_window()

        #PhantomJS
        # cap = webdriver.DesiredCapabilities.PHANTOMJS
        # cap["phantomjs.page.settings.resourceTimeout"] = 1000
        # cap["phantomjs.page.settings.loadImages"] = False
        # cap["phantomjs.page.settings.userAgent"] = "faking it"
        # cls.driver = webdriver.PhantomJS(desired_capabilities=cap)
        # cls.driver.set_window_size(1500, 1200)

        cls.driver.implicitly_wait(0)
        cls.verificationErrors = []
        cls.accept_next_alert = True
        cls.suite_start_time= time.time()
        cls.tmp_file_before = os.listdir("/tmp")

    @classmethod
    def tearDownClass(cls):
        # Clean up the downloaded XLS file if the test got that far.
        after  = os.listdir("/tmp")
        change = set(after) - set(cls.tmp_file_before)
        file_name ="no file exists"
        if len(change) == 1:
            file_name = change.pop()
        else:
            print "More than one file or no file downloaded"

        print "file_name to be deleted: " + file_name

        if os.path.isfile('/tmp/'+ file_name):
            os.remove('/tmp/'+ file_name)

        cls.driver.quit()

        #quit the ghost window
        cls.display.stop()

    def test_step_01_initial_login(self):
        # KoBoForm test.
        self.base_url= self.KOBOFORM_URL
        self.username = self.KOBO_USERNAME
        self.password = self.KOBO_PASSWORD

        # Do a duck typing magic trick so this 'TestCase' descendant can use a test method of a sibling descendant.
        test_case_class= login_test.LoginTest
        test_method_name= test_case_class.test_login.__name__
        test_case_class.__dict__[test_method_name](self)

    def test_step_02_create_new_form_from_scratch(self):
        # KoBoForm test.
        self.base_url= self.KOBOFORM_URL

        # Do a duck typing magic trick so this 'TestCase' descendant can use a test method of a sibling descendant.
        test_case_class= new_form_from_scratch_test.NewFormFromScratchTest
        test_method_name= test_case_class.create_new_form_from_scratch.__name__
        test_case_class.__dict__[test_method_name](self)

    def test_step_03_add_sample_questions(self):
        # KoBoForm test.
        self.base_url= self.KOBOFORM_URL

        # Do a duck typing magic trick so this 'TestCase' descendant can use a test method of a sibling descendant.
        test_case_class= add_sample_questions_test.AddSampleQuestionsTest
        test_method_name= test_case_class.add_questions_test.__name__
        test_case_class.__dict__[test_method_name](self)

    def test_step_04_preview_form(self):
        # KoBoForm test.
        self.base_url= self.KOBOFORM_URL

        # Do a duck typing magic trick so this 'TestCase' descendant can use a test method of a sibling descendant.
        test_case_class= preview_form_test.PreviewFormTest
        test_method_name= test_case_class.preview_form.__name__
        test_case_class.__dict__[test_method_name](self)

    def test_step_05_export_form_to_xls(self):
        # KoBoForm test.
        self.base_url = self.KOBOFORM_URL

        # Do a duck typing magic trick so this 'TestCase' descendant can use a test method of a sibling descendant.
        test_case_class= export_form_to_xls_test.ExportFormToXlsTest
        test_method_name= test_case_class.export_form_to_xls.__name__
        test_case_class.__dict__[test_method_name](self)

    def test_step_06_delete_all_forms(self):
        # KoBoForm test.
        self.base_url = self.KOBOFORM_URL

        # Do a duck typing magic trick so this 'TestCase' descendant can use a test method of a sibling descendant.
        test_case_class= delete_all_forms_test.DeleteAllFormsTest
        test_method_name= test_case_class.delete_all_forms.__name__
        test_case_class.__dict__[test_method_name](self)

    def test_step_07_import_xls_form(self):
        # KoBoFrom test.
        self.base_url= self.KOBOFORM_URL

        # Do a duck typing magic trick so this 'TestCase' descendant can use a test method of a sibling descendant.
        test_case_class= import_xls_form_test.ImportXlsFormTest
        test_method_name= test_case_class.test_import_xls_form.__name__
        test_case_class.__dict__[test_method_name](self)

    def test_step_08_deploy_imported_form(self):
        # KoBoForm test.
        self.base_url = self.KOBOFORM_URL

        # Do a duck typing magic trick so this 'TestCase' descendant can use a test method of a sibling descendant.
        test_case_class= deploy_imported_form_test.DeployImportedFormTest
        test_method_name= test_case_class.deploy_form.__name__
        test_case_class.__dict__[test_method_name](self)

    def test_step_09_enketo_form_submission(self):
        # KoBoForm test.
        self.base_url = self.KOBOFORM_URL

        # Do a duck typing magic trick so this 'TestCase' descendant can use a test method of a sibling descendant.
        test_case_class= enketo_form_submission_test.EnketoFormSubmissionTest
        test_method_name= test_case_class.submit_from_enketo.__name__
        test_case_class.__dict__[test_method_name](self)

    def test_step_10_export_data_to_xls(self):
        # KoBoForm test.
        self.base_url = self.KOBOFORM_URL

        # Do a duck typing magic trick so this 'TestCase' descendant can use a test method of a sibling descendant.
        test_case_class= export_data_to_xls_test.ExportDataToXls
        test_method_name= test_case_class.export_data.__name__
        test_case_class.__dict__[test_method_name](self)

    def test_step_11_delete_form(self):
        # KoBoForm test.
        self.base_url= self.KOBOFORM_URL

        # Do a duck typing magic trick so this 'TestCase' descendant can use a test method of a sibling descendant.
        test_case_class= delete_form_test.DeleteFormTest
        test_method_name= test_case_class.delete_form.__name__
        test_case_class.__dict__[test_method_name](self)

    def test_step_12_verify_no_forms(self):
        # KoBoFrom test.
        self.base_url= self.KOBOFORM_URL

        # Do a duck typing magic trick so this 'TestCase' descendant can use a test method of a sibling descendant.
        test_case_class= verify_no_forms_test.VerifyNoFormsTest
        test_method_name= test_case_class.test_verify_no_forms.__name__
        test_case_class.__dict__[test_method_name](self)


    def test_step_13_logout(self):
        # KoBoCAT test.
        self.base_url= self.KOBOCAT_URL

        # Do a duck typing magic trick so this 'TestCase' descendant can use a test method of a sibling descendant.
        test_case_class= logout_test.LogoutTest
        test_method_name= test_case_class.test_logout.__name__
        test_case_class.__dict__[test_method_name](self)


if __name__ == "__main__":
    #import sys;sys.argv = ['', 'Test.testName']
    unittest.main()
